{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "mxs",
  "fileTypes": [
    "ms",
    "mse",
    "mcr"
  ],
  "foldingStartMarker": "(-{2})?\\(\\s*$",
  "foldingStopMarker": "^\\s*(-{2})?\\s*\\)",
  "patterns": [
    {
      "include": "#statements"
    }
  ],
  "repository": {
    "statements": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#decl-block"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#numeric"
        },
        {
          "include": "#variable"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#storage"
        },
        {
          "include": "#meta"
        },
        {
          "include": "#support"
        },
        {
          "include": "#brackets"
        },
        {
          "include": "#punctuation"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.terminator.statement.mxs",
          "match": ";"
        },
        {
          "name": "punctuation.terminator.linebreak.mxs",
          "match": "\\\\"
        },
        {
          "name": "punctuation.accessor.mxs",
          "match": "\\."
        }
      ]
    },
    "punctuation-comma": {
      "name": "punctuation.separator.comma.mxs",
      "match": ","
    },
    "punctuation-bitrange": {
      "name": "punctuation.bitrange.mxs",
      "match": "\\.\\."
    },
    "decl-block": {
      "name": "meta.block.mxs",
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.mxs"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.mxs"
        }
      },
      "patterns": [
        {
          "include": "#statements"
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "name": "punctuation.section.brackets.mxs",
          "match": "\\["
        },
        {
          "name": "punctuation.section.brackets.mxs",
          "match": "\\]"
        }
      ]
    },
    "notes": {
      "patterns": [
        {
          "match": "(@param)\\s+(\\w+)",
          "captures": {
            "1": {
              "name": "storage.type.class"
            },
            "2": {
              "name": "variable.other"
            }
          }
        },
        {
          "name": "documentation.todo.mxs",
          "match": "(?i)todo:"
        },
        {
          "name": "documentation.fixme.mxs",
          "match": "(?i)fixme:"
        },
        {
          "name": "documentation.plain.mxs",
          "begin": "``",
          "end": "``",
          "patterns": [
            {
              "include": "#numeric"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#storage"
            },
            {
              "include": "#support"
            }
          ]
        },
        {
          "name": "documentation.bold.mxs",
          "match": "\\b_[^_]([\\w\\s])+?_\\b"
        },
        {
          "name": "documentation.underline.mxs",
          "match": "\\b__[^_]([\\w\\s])+?__\\b"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.line.mxs",
          "begin": "--",
          "end": "$",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.mxs"
            }
          }
        },
        {
          "name": "comment.block.documentation.mxs",
          "begin": "/\\*\\*",
          "end": "\\*/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.mxs"
            }
          },
          "patterns": [
            {
              "include": "#numeric"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#storage"
            },
            {
              "include": "#support"
            },
            {
              "include": "#notes"
            }
          ]
        },
        {
          "name": "comment.block.mxs",
          "begin": "/\\*(?!\\*)",
          "end": "\\*/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.mxs"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.operator.relational.mxs",
          "match": "<=|>=|<|>"
        },
        {
          "name": "keyword.operator.comparison.mxs",
          "match": "!=|=="
        },
        {
          "name": "keyword.operator.assignment.mxs",
          "match": "\\+=|\\*=|-=|\\/=|="
        },
        {
          "name": "keyword.operator.assignment.mxs",
          "match": "(?<!:):(?=[^:]|:{2}[^:])"
        },
        {
          "name": "keyword.operator.arithmetic.mxs",
          "match": "%|\\*|-|\\^|\\+"
        },
        {
          "name": "keyword.operator.logical.mxs",
          "match": "(?i)(?<![.$])\\b(and|or|as|not)\\b"
        },
        {
          "name": "keyword.control.mxs",
          "match": "(?i)(?<![.$])\\b(case|catch|collect|continue|do|else|exit|for|if|return|then|throw|try|when|where|while|with|dontcollect|of|at|by|in|to)\\b"
        },
        {
          "name": "keyword.other.mxs",
          "match": "(?i)(?<![.$])\\b(about|coordsys|max|animate|from|undo|set)\\b"
        },
        {
          "match": "(?:(&)(?:[A-Za-z_][A-Za-z_0-9]*))",
          "captures": {
            "1": {
              "name": "keyword.operator.byref.mxs"
            }
          }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.mxs",
          "begin": "(?<!@)\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.mxs",
              "match": "\\\\(?:n|r|t|\\*|\\?|\\\\|%|x[A-Fa-f0-9]+)"
            },
            {
              "name": "constant.character.escape.mxs",
              "match": "(?m)(\\\\\")"
            }
          ]
        },
        {
          "name": "string.quoted.double.verbatim.mxs",
          "begin": "@\"",
          "end": "\""
        },
        {
          "name": "string.quoted.other.mxs",
          "begin": "~",
          "end": "~"
        }
      ]
    },
    "numeric": {
      "patterns": [
        {
          "name": "constant.numeric.mxs",
          "match": "\\b\\d+\\.\\d+([EeDd][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.mxs",
          "match": "\\b(\\d+)(\\.)\\b"
        },
        {
          "name": "constant.numeric.mxs",
          "match": "(?<!\\w)(\\.\\d+([EeDd][+-]?\\d+)?)"
        },
        {
          "name": "constant.numeric.mxs",
          "match": "(?i)(?<!\\.)\\b[+-]?\\d+[LP]?\\b"
        },
        {
          "name": "constant.numeric.mxs",
          "match": "(?i)(?<!\\w|\\.)(?:\\d*\\.\\d+|\\d+\\.?\\d*)[msft](?:(?:\\d+|\\d*\\.\\d*)[msft])*"
        },
        {
          "name": "constant.numeric.mxs",
          "match": "(?<!\\w)\\d+(?:\\:)\\d+(\\.\\d+)?(?!\\w)"
        },
        {
          "name": "constant.numeric.hex.mxs",
          "match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b"
        }
      ]
    },
    "meta": {
      "patterns": [
        {
          "name": "meta.struct.mxs",
          "match": "(?i)(?:\\b(struct)\\b\\s+(\\w+))",
          "captures": {
            "1": {
              "name": "storage.type.struct.mxs"
            },
            "2": {
              "name": "entity.name.type.mxs"
            }
          }
        },
        {
          "name": "meta.function.mxs",
          "begin": "(?i)\\b((?:mapped\\s+)?(?:fn|function))\\s+(\\w+)",
          "end": "=",
          "beginCaptures": {
            "1": {
              "name": "storage.type.function.mxs"
            },
            "2": {
              "name": "entity.name.function.mxs"
            }
          },
          "patterns": [
            {
              "include": "#statements"
            }
          ],
          "endCaptures": {
            "0": {
              "name": "keyword.operator.mxs"
            }
          }
        },
        {
          "name": "meta.event.mxs",
          "begin": "(?im)^(?:[ \\t]|;)*(on)\\b",
          "end": "(?i)\\b(do|return)\\b",
          "beginCaptures": {
            "1": {
              "name": "storage.type.event.mxs"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.mxs"
            }
          },
          "patterns": [
            {
              "match": "(?i)(?:\\s+(\\w+))?\\s+(\\w+)\\s+(?=do|return)",
              "captures": {
                "1": {
                  "name": "entity.other.event.mxs"
                },
                "2": {
                  "name": "entity.name.event.mxs"
                }
              }
            },
            {
              "match": "(?i)\\s+(\\w+)\\s+(\\w+)\\s+(\\w+)(?:\\s+(\\w+))?\\s+(?=do|return)",
              "captures": {
                "1": {
                  "name": "entity.other.event.mxs"
                },
                "2": {
                  "name": "entity.name.event.mxs"
                },
                "3": {
                  "name": "entity.other.event.mxs"
                },
                "4": {
                  "name": "entity.other.event.mxs"
                }
              }
            }
          ]
        },
        {
          "name": "meta.entity",
          "match": "(?i)\\b(attributes|macroscript|parameters|plugin|rcmenu|rollout|tool|utility)\\b\\s+(\\w+)\\b",
          "captures": {
            "1": {
              "name": "storage.type.entity.mxs"
            },
            "2": {
              "name": "entity.name.entity.mxs"
            }
          }
        }
      ]
    },
    "variable": {
      "patterns": [
        {
          "name": "variable.property.mxs",
          "match": "(?<=\\.)([A-Za-z_][A-Za-z_0-9]*)\\b"
        },
        {
          "name": "variable.parameter.mxs",
          "match": "\\b([A-Za-z_][A-Za-z_0-9]*)(?=\\s*:[^:])",
          "comment": "Matches keyword assignment in function calls and definitions (e.g., fn add flag:#optional)"
        },
        {
          "name": "variable.language.mxs",
          "match": "(?i)\\b(this)\\b"
        },
        {
          "name": "variable.other.mxs",
          "match": "(:{2})(\\w+)\\b"
        },
        {
          "name": "variable.other.pathname.mxs",
          "match": "\\$(?:(?:[A-Za-z0-9_*?\\/\\\\]|[.]{3})+|'((?:[^'\\n\\r])+)')?"
        },
        {
          "name": "variable.identifier.quoted.mxs",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.mxs",
              "match": "\\\\(\\*|\\?|\\\\|\\')"
            }
          ]
        },
        {
          "name": "variable.identifier.name.mxs",
          "match": "(#)(\\w+)\\b"
        },
        {
          "name": "variable.identifier.name.quoted.mxs",
          "match": "(#)(?:('[^']*')|(\\w+))\\b"
        }
      ]
    },
    "constant": {
      "patterns": [
        {
          "name": "constant.language.boolean.mxs",
          "match": "(?i)\\b(true|on|false|off)\\b"
        },
        {
          "name": "constant.language.math.mxs",
          "match": "(?i)\\b(pi|e)\\b"
        },
        {
          "name": "constant.language.colour.mxs",
          "match": "(?i)\\b(?>red|green|blue|white|black|orange|yellow|brown|gray)\\b"
        },
        {
          "name": "constant.language.axis.mxs",
          "match": "(?i)\\b([xyz]_axis)\\b"
        },
        {
          "name": "constant.language.null.mxs",
          "match": "(?i)\\b(?>undefined|unsupplied|silentvalue|ok)\\b"
        }
      ]
    },
    "storage": {
      "patterns": [
        {
          "name": "storage.type.declaration.mxs",
          "match": "(?i)(?<!\\.)\\b(global|local|private|public|persistent)\\b"
        },
        {
          "name": "meta.array.mxs",
          "begin": "(#)\\s*(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.sharp.mxs"
            },
            "2": {
              "name": "punctuation.section.parens.mxs"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.mxs"
            }
          },
          "patterns": [
            {
              "include": "#statements"
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        },
        {
          "name": "meta.bitarray.mxs",
          "begin": "(#)\\s*(\\{)",
          "end": "\\}",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.sharp.mxs"
            },
            "2": {
              "name": "punctuation.section.braces.mxs"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.braces.mxs"
            }
          },
          "patterns": [
            {
              "include": "#punctuation-bitrange"
            },
            {
              "include": "#statements"
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        },
        {
          "name": "meta.point.mxs",
          "begin": "(?<![\\w\\d])\\[",
          "end": "\\]",
          "patterns": [
            {
              "include": "#statements"
            },
            {
              "include": "#punctuation-comma"
            }
          ]
        }
      ]
    },
    "support": {
      "patterns": [
        {
          "name": "entity.name.type.mxs",
          "match": "(?<!\\.)(?:[A-Za-z_][A-Za-z_0-9]*)+(?=\\.)"
        },
        {
          "name": "support.variable.objectset.mxs",
          "match": "(?i)(?<![.$])\\b(?:cameras|geometry|helpers|lights|object[s]?|objectSet|primitive|selection|shapes|spacewarps|systems)\\b"
        },
        {
          "name": "support.type.primitive.mxs",
          "match": "(?i)(?<![.$])\\b(?:AngleAxis|Array|BigMatrix|BigMatrixRowArray|BinStream|BitArray|Bitmap|Box2|Box3|color|DataPair|interval|Dictionary|Double|EulerAngles|FileStream|Float|HKey|Integer|Integer64|IntegerPtr|Matrix3|MAXKey|mesh|Name|PathName|Point2|Point3|Point4|Quat|Ray|String|StringStream|Time|Timer|TriMesh)\\b"
        },
        {
          "name": "support.type.rolloutcontrol.mxs",
          "match": "(?i)(?<![.$])\\b(?:angle|button|checkbox|checkbutton|colorpicker|comboBox|curveControl|dotNetControl|dropdownList|editText|group|groupBox|hyperLink|imgTag|label|listBox|mapbutton|materialbutton|menuitem|subMenu|separator|multilistBox|pickbutton|popUpMenu|progressbar|radiobuttons|SchematicControl|slider|spinner|SubRollout|timer)\\b"
        },
        {
          "name": "support.type.bitwise.mxs",
          "match": "(?i)(?<![.$])\\b(?:bit)(\\.)(?:and|or|xor|not|shift|set|flip|get|intAsChar|charAsInt|intAsHex|intAsFloat|floatAsInt|swapBytes|isNAN|isFinite|doubleAsInt64|int64AsDouble)\\b"
        },
        {
          "name": "support.function.math.mxs",
          "match": "(?i)(?<![.$])\\b(?:abs|acos|asin|atan|atan2|ceil|close_enough|cos|cosh|degToRad|exp|floor|log|log10|logN|mod|pow|radToDeg|random|seed|sin|sinh|sqrt|tanh)\\b"
        },
        {
          "name": "support.function.vector.mxs",
          "match": "(?i)(?<![.$])\\b(?:arbAxis|cross|distance|dot|length|normalize|composite|noise3|noise4|turbulence|fractalNoise)\\b"
        },
        {
          "name": "support.function.geo.mxs",
          "match": "(?i)(?<![.$])\\b(?:conjugate|eulerToQuat|GetEulerMatAngleRatio|getEulerQuatAngleRatio|inverse|inverseHighPrecision|isIdentity|LnDif|matrixFromNormal|orthogonalize|preRotate|preRotateX|preRotateY|preRotateZ|preScale|preTranslate|qCompA|qorthog|quatArrayToEulerArray|quatToEuler|quatToEuler2|rotate|rotateX|rotateXMatrix|rotateY|rotateYMatrix|rotateYPRMatrix|rotateZ|rotateZMatrix|scale|scaleMatrix|slerp|squad|squadrev|transform|translate|transMatrix|xformMat|zero|Intersects|transpose|clear|setSize|contains|rectify|empty|isEmpty|move)\\b"
        },
        {
          "name": "support.function.array.mxs",
          "match": "(?i)(?<![.$])\\b(?:amax|amin|append|appendIfUnique|bsearch|deepCopy|deleteItem|findItem|insertItem|join|makeUniqueArray|qsort|sort)\\b"
        },
        {
          "name": "support.function.string.mxs",
          "match": "(?i)(?<![.$])\\b(?:filterString|findString|GetTextExtent|matchPattern|replace|replace_CRLF_with_LF|replace_LF_with_CRLF|stricmp|substituteString|substring|toLower|toUpper)\\b"
        },
        {
          "name": "support.function.generic.mxs",
          "match": "(?i)(?<![.$])\\b(?:copy|free|execute|delete|select|deselect|isDeleted|print|format)\\b"
        }
      ]
    }
  },
  "scopeName": "source.mxs"
}